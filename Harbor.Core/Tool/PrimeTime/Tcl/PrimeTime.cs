// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Harbor.Core.Tool.PrimeTime.Tcl
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PrimeTime : PrimeTimeBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("#自动生成的脚本\r\n#");
            
            #line 7 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.DateTime.Now));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n#=====================设置变量======================\r\nset top_name         \"");
            
            #line 10 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TopName));
            
            #line default
            #line hidden
            this.Write("\"\r\nset apr_net_path     \"");
            
            #line 11 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.APRNetlist));
            
            #line default
            #line hidden
            this.Write("\"\r\nset syn_net_path     \"");
            
            #line 12 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.SynNetlist));
            
            #line default
            #line hidden
            this.Write("\"\r\nset script_root_path \"");
            
            #line 13 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ScriptRootPath));
            
            #line default
            #line hidden
            this.Write("\"\r\nset lib_path         \"");
            
            #line 14 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.LibPath));
            
            #line default
            #line hidden
            this.Write("\"\r\nset rpt_path         \"");
            
            #line 15 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.RptPath));
            
            #line default
            #line hidden
            this.Write("\"\r\n\r\nset search_path \"$script_root_path \\\r\n                 $lib_path         \\\r\n" +
                    "                \"\r\n\r\n#=====================设置工艺库======================\r\n\r\nset li" +
                    "b_name       \"");
            
            #line 23 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.LibName));
            
            #line default
            #line hidden
            this.Write("\"\r\nset target_library \"");
            
            #line 24 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.LibFullName));
            
            #line default
            #line hidden
            this.Write("\"\r\nset link_library   \"");
            
            #line 25 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.LibFullName));
            
            #line default
            #line hidden
            this.Write(@"""

#=====================设置变量======================

# variable settings :
set_message_info -id RC-009   -limit 200                ;# inaccurate rc computations , 
set_message_info -id PARA-046 -limit 200                ;# try it, why so many ?

set si_enable_analysis true
set report_default_significant_digits 4
set timing_remove_clock_reconvergence_pessimism true
set timing_input_port_default_clock false
set timing_save_pin_arrival_and_slack true
set timing_report_unconstrained_paths true              ;# report timing more easier ,
set si_xtalk_double_switching_mode clock_network 
set timing_enable_multiple_clocks_per_reg true
#set timing_enable_preset_clear_arcs true

# read verilog :
");
            
            #line 44 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
 if(model.APRorSyn) {
            
            #line default
            #line hidden
            this.Write("read_verilog ${apr_net_path}/${top_name}.v\r\n");
            
            #line 46 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("read_verilog ${syn_net_path}/${top_name}.v\r\n");
            
            #line 48 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
 } 
            
            #line default
            #line hidden
            this.Write("current_design $top_name\r\nlink\r\n\r\n# disable multi-threading capabilities , so rea" +
                    "d_parasitics will not at the background ,\r\n# enable it ( default ) to read spef " +
                    "at the background faster , log as \'parasitics_command.log\'\r\nset_host_options -ma" +
                    "x_core ");
            
            #line 54 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Cores));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 56 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
 if(model.APRorSyn) {
            
            #line default
            #line hidden
            this.Write(@"# read spef : keep si effect ,
read_parasitics -verbose -keep_capacitive_coupling -format SPEF ${apr_net_path}/${top_name}.spef.min

report_annotated_parasitics -check -list_not_annotated -max_nets 10000 -constant_arcs; # output to screen ,
report_annotated_parasitics -check -list_not_annotated -max_nets 20000 -constant_arcs > ${rpt_path}/report_annotated_parasitics.report 

complete_net_parasitics -complete_with zero
");
            
            #line 64 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
 }
            
            #line default
            #line hidden
            this.Write(@"


# source sdc , for each corner :
source ${syn_net_path}/${top_name}.sdc

# make sure after cts propagated : exclude virtual clocks ,
set_propagated_clock [filter_coll [all_clocks] ""defined(sources)"" ]

# set 0.1ns margin as setup, hold check ,
remove_clock_uncertainty [all_clocks]
set_clock_uncertainty -setup ");
            
            #line 76 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ClkUncertaintySetup));
            
            #line default
            #line hidden
            this.Write(" [all_clocks]\r\nset_clock_uncertainty -hold ");
            
            #line 77 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ClkUncertaintyHold));
            
            #line default
            #line hidden
            this.Write(" [all_clocks]\r\n\r\n# set drc rule : cap value is what ?\r\nset_max_transition ");
            
            #line 80 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.MaxTransition));
            
            #line default
            #line hidden
            this.Write(@"  [current_design]
set_max_capacitance 0.4 [current_design]

# differentiate between setup/hold check : different derate number , 
set_timing_derate -early 0.95 -clock
set_timing_derate -late 1.05 -clock

# group path to differ i/o path : copy from icc place.tcl group io path ,
# group path for internal and external path : please exclude clock port ,
set clk_ports { ");
            
            #line 89 "E:\Documents\Repo\Harbor2\Harbor.Core\Tool\PrimeTime\Tcl\PrimeTime.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ClkName));
            
            #line default
            #line hidden
            this.Write(" }\r\ngroup_path -name in2reg -from [remove_from_coll [all_inputs] [get_ports $clk_" +
                    "ports]]\r\ngroup_path -name in2out -from [remove_from_coll [all_inputs] [get_ports" +
                    " $clk_ports]] -to [all_outputs]\r\ngroup_path -name reg2out -to [all_outputs]\r\n\r\n#" +
                    " control latch timing borrow time : an option ,\r\n#set_max_time_borrow 0.7 [all_c" +
                    "locks]\r\n# can revise based on specific timing paths , refer to some latch cells " +
                    "only ,\r\n\r\n# save session if needs :\r\nupdate_timing -full\r\nsave_session pt.sessio" +
                    "n \r\n\r\n# check timing : \r\ncheck_timing -verbose > ${rpt_path}/check_timing.report" +
                    "\r\n\r\n# report timing : \r\nreport_analysis_coverage > ${rpt_path}/report_analysis_c" +
                    "overage.report\r\nreport_global_timing  > ${rpt_path}/report_global_timing.rpt\r\n\r\n" +
                    "report_timing -crosstalk_delta -slack_lesser_than 0 -delay max -derate -nosplit " +
                    "-input -net -cap -trans  \\\r\n-max_paths 1000 -nworst 1 > ${rpt_path}/report_timin" +
                    "g_max.rpt\r\n\r\n# min timing :\r\nreport_timing -crosstalk_delta -slack_lesser_than 0" +
                    " -delay min -derate -nosplit -input -net -cap -trans  \\\r\n-max_paths 1000 -nworst" +
                    " 1 > ${rpt_path}/report_timing_min.rpt\r\n\r\nreport_clock_timing -type latency  >  " +
                    "${rpt_path}/report_clock_timing.rpt\r\nreport_disable_timing > ${rpt_path}/report_" +
                    "disable_timing.report\r\nreport_constraints -all_violators > ${rpt_path}/all_viola" +
                    "ted.rpt \r\nreport_design > ${rpt_path}/report_design.report \r\n\r\n# report noise , " +
                    "\r\nreport_noise -nosplit -all_violators -above -low > ${rpt_path}/report_noise_al" +
                    "l_viol_above_low.report \r\nreport_noise -nosplit -nworst 10 -above -low > ${rpt_p" +
                    "ath}/report_noise_above_low.report \r\n\r\nreport_noise -nosplit -all_violators -bel" +
                    "ow -high > ${rpt_path}/report_noise_all_viol_below_high.report \r\nreport_noise -n" +
                    "osplit -nworst 10 -below -high > ${rpt_path}/report_noise_below_high.report \r\n\r\n" +
                    "# Clock Network Double Switching Report\r\nreport_si_double_switching -nosplit -ri" +
                    "se -fall > ${rpt_path}/report_si_double_switching.report \r\nreport_clock -skew -a" +
                    "ttribute > ${rpt_path}/report_clock.report \r\n\r\nwrite_sdf -version 2.1 -input_por" +
                    "t_nets -output_port_nets -context verilog -no_edge ${rpt_path}/${top_name}.sdf\r\n" +
                    "#-no_negative_values\r\n\r\nexit ");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class PrimeTimeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
