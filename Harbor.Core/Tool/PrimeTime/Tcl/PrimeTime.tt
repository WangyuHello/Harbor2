<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#自动生成的脚本
#<#= System.DateTime.Now#>

#=====================设置变量======================
set top_name         "<#= model.TopName #>"
set apr_net_path     "<#= model.APRNetlist #>"
set syn_net_path     "<#= model.SynNetlist #>"
set script_root_path "<#= model.ScriptRootPath #>"
set lib_path         "<#= model.LibPath #>"
set rpt_path         "<#= model.RptPath #>"

set search_path "$script_root_path \
                 $lib_path         \
                "

#=====================设置工艺库======================

set lib_name       "<#= model.LibName #>"
set target_library "<#= model.LibFullName #>"
set link_library   "<#= model.LibFullName #>"

#=====================设置变量======================

# variable settings :
set_message_info -id RC-009   -limit 200                ;# inaccurate rc computations , 
set_message_info -id PARA-046 -limit 200                ;# try it, why so many ?

set si_enable_analysis true
set report_default_significant_digits 4
set timing_remove_clock_reconvergence_pessimism true
set timing_input_port_default_clock false
set timing_save_pin_arrival_and_slack true
set timing_report_unconstrained_paths true              ;# report timing more easier ,
set si_xtalk_double_switching_mode clock_network 
set timing_enable_multiple_clocks_per_reg true
#set timing_enable_preset_clear_arcs true

# read verilog :
<# if(model.APRorSyn) {#>
read_verilog ${apr_net_path}/${top_name}.v
<# } else {#>
read_verilog ${syn_net_path}/${top_name}.v
<# } #>
current_design $top_name
link

# disable multi-threading capabilities , so read_parasitics will not at the background ,
# enable it ( default ) to read spef at the background faster , log as 'parasitics_command.log'
set_host_options -max_core <#= model.Cores #>

<# if(model.APRorSyn) {#>
# read spef : keep si effect ,
read_parasitics -verbose -keep_capacitive_coupling -format SPEF ${apr_net_path}/${top_name}.spef.min

report_annotated_parasitics -check -list_not_annotated -max_nets 10000 -constant_arcs; # output to screen ,
report_annotated_parasitics -check -list_not_annotated -max_nets 20000 -constant_arcs > ${rpt_path}/report_annotated_parasitics.report 

complete_net_parasitics -complete_with zero
<# }#>



# source sdc , for each corner :
source ${syn_net_path}/${top_name}.sdc

# make sure after cts propagated : exclude virtual clocks ,
set_propagated_clock [filter_coll [all_clocks] "defined(sources)" ]

# set 0.1ns margin as setup, hold check ,
remove_clock_uncertainty [all_clocks]
set_clock_uncertainty -setup <#= model.ClkUncertaintySetup #> [all_clocks]
set_clock_uncertainty -hold <#= model.ClkUncertaintyHold #> [all_clocks]

# set drc rule : cap value is what ?
set_max_transition <#= model.MaxTransition #>  [current_design]
set_max_capacitance 0.4 [current_design]

# differentiate between setup/hold check : different derate number , 
set_timing_derate -early 0.95 -clock
set_timing_derate -late 1.05 -clock

# group path to differ i/o path : copy from icc place.tcl group io path ,
# group path for internal and external path : please exclude clock port ,
set clk_ports { <#= model.ClkName #> }
group_path -name in2reg -from [remove_from_coll [all_inputs] [get_ports $clk_ports]]
group_path -name in2out -from [remove_from_coll [all_inputs] [get_ports $clk_ports]] -to [all_outputs]
group_path -name reg2out -to [all_outputs]

# control latch timing borrow time : an option ,
#set_max_time_borrow 0.7 [all_clocks]
# can revise based on specific timing paths , refer to some latch cells only ,

# save session if needs :
update_timing -full
save_session pt.session 

# check timing : 
check_timing -verbose > ${rpt_path}/check_timing.report

# report timing : 
report_analysis_coverage > ${rpt_path}/report_analysis_coverage.report
report_global_timing  > ${rpt_path}/report_global_timing.rpt

report_timing -crosstalk_delta -slack_lesser_than 0 -delay max -derate -nosplit -input -net -cap -trans  \
-max_paths 1000 -nworst 1 > ${rpt_path}/report_timing_max.rpt

# min timing :
report_timing -crosstalk_delta -slack_lesser_than 0 -delay min -derate -nosplit -input -net -cap -trans  \
-max_paths 1000 -nworst 1 > ${rpt_path}/report_timing_min.rpt

report_clock_timing -type latency  >  ${rpt_path}/report_clock_timing.rpt
report_disable_timing > ${rpt_path}/report_disable_timing.report
report_constraints -all_violators > ${rpt_path}/all_violated.rpt 
report_design > ${rpt_path}/report_design.report 

# report noise , 
report_noise -nosplit -all_violators -above -low > ${rpt_path}/report_noise_all_viol_above_low.report 
report_noise -nosplit -nworst 10 -above -low > ${rpt_path}/report_noise_above_low.report 

report_noise -nosplit -all_violators -below -high > ${rpt_path}/report_noise_all_viol_below_high.report 
report_noise -nosplit -nworst 10 -below -high > ${rpt_path}/report_noise_below_high.report 

# Clock Network Double Switching Report
report_si_double_switching -nosplit -rise -fall > ${rpt_path}/report_si_double_switching.report 
report_clock -skew -attribute > ${rpt_path}/report_clock.report 

write_sdf -version 2.1 -input_port_nets -output_port_nets -context verilog -no_edge ${rpt_path}/${top_name}.sdf
#-no_negative_values

exit 