<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Harbor.Common.Model" #>
<#= HarborTextModel.Header() #>

#=====================设置变量======================
set top_name         "<#= model.TopName #>"
set net_path         "<#= model.Netlist #>"
set syn_net_path     "<#= model.SynNetlist #>"
set gds_path         "<#= model.GDSPath #>"
set rpt_path         "<#= model.RptPath #>"
set script_root_path "<#= model.ScriptRootPath #>"
set lib_path         "<#= model.LibPath #>"
<# var stdCellPowerPin = string.IsNullOrEmpty(model.Power) ? "VDD" : model.Power; #>
<# var stdCellGroundPin = string.IsNullOrEmpty(model.Ground) ? "VSS" : model.Ground; #>

set MnTXTs           [dict create 1 <#= model.MnTXT1 #> 2 <#= model.MnTXT2 #> 3 <#= model.MnTXT3 #> 4 <#= model.MnTXT4 #> 5 <#= model.MnTXT5 #> 6 <#= model.MnTXT6 #>]

set search_path "$script_root_path \
                 $lib_path         \
                "

#=====================设置工艺库======================

set lib_name       "<#= model.LibName #>"
set target_library "<#= model.LibFullName #> \
<# foreach(var io_lib in model.IOTimingDbPaths) { #>
                    <#= io_lib #> \
<# } #>
<# foreach(var addi_lib in model.AdditionalTimingDbPaths) { #>
                    <#= addi_lib #> \
<# } #>
                   "
set link_library   "<#= model.LibFullName #> \
<# foreach(var io_lib in model.IOTimingDbPaths) { #>
                    <#= io_lib #> \
<# } #>
<# foreach(var addi_lib in model.AdditionalTimingDbPaths) { #>
                    <#= addi_lib #> \
<# } #>
                   "
<# if(!string.IsNullOrEmpty(model.StdCell.symbol_full_name)) { #>
set symbol_library "<#= model.StdCell.symbol_full_name #>"
<# } #>

#====================Steps========================
# 1. init_design
# 2. place_opt
# 3. clock_opt_cts
# 4. clock_opt_psyn
# 5. clock_opt_route
# 6. route
# 7. route_opt
# 8. chip_finish
# 9. output


#====================1. init_design=====================

set_app_var rc_driver_model_mode advanced
set_app_var rc_receiver_model_mode advanced

create_mw_lib -technology <#= model.TechFilePath #> -mw_reference_library { <#= string.Join(" ", model.RefLibPath) #> } -bus_naming_style {[%d]} -open $top_name
# import_designs -format ddc -top $top_name -cel $top_name { $syn_net_path/$top_name\.ddc }
read_verilog $syn_net_path/$top_name\.v -dirty_netlist -top $top_name -cel $top_name
<# if(!string.IsNullOrEmpty(model.TLUPMax)) { #>
set_tlu_plus_files -max_tluplus <#= model.TLUPMax #> -min_tluplus <#= model.TLUPMin #> -tech2itf_map <#= model.Tech2itfMap #>
<# } #>
read_sdc -version Latest $syn_net_path/$top_name\.sdc

uniquify_fp_mw_cel
current_design 
link

if {[check_error -verbose] != 0} { exit 1 }
save_mw_cel -design $top_name -as "$top_name\_init_design"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events


#忽略PAD设置

remove_ideal_network -all
remove_propagated_clock [all_clocks]

<# 
var pin_pad_tcl = "$script_root_path/pin_pad.tcl";
if(!string.IsNullOrEmpty(model.PinConstrainFilePath)) {
    pin_pad_tcl = model.PinConstrainFilePath;
} #>
read_pin_pad_physical_constraints "<#= pin_pad_tcl #>"

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
# derive_pg_connection -verbose

<#
switch (model.FloorPlanSettings.FloorPlanType)
{
    case FloorPlanType.AspectRatio:
#>
create_floorplan \
    -control_type aspect_ratio \
    -left_io2core      <#= model.FloorPlanSettings.LeftIO2Core #> \
    -bottom_io2core    <#= model.FloorPlanSettings.BottomIO2Core #> \
    -right_io2core     <#= model.FloorPlanSettings.RightIO2Core #> \
    -top_io2core       <#= model.FloorPlanSettings.TopIO2Core #> \
    -core_aspect_ratio <#= model.FloorPlanSettings.AspectRatio #> \
    -core_utilization  <#= model.FloorPlanSettings.CoreUtilization #> \
    -start_first_row
<#
        break;
    case FloorPlanType.WidthHeightAuto:
    case FloorPlanType.WidthHeight:
#>
create_floorplan \
    -control_type width_and_height \
    -left_io2core      <#= model.FloorPlanSettings.LeftIO2Core #> \
    -bottom_io2core    <#= model.FloorPlanSettings.BottomIO2Core #> \
    -right_io2core     <#= model.FloorPlanSettings.RightIO2Core #> \
    -top_io2core       <#= model.FloorPlanSettings.TopIO2Core #> \
    -core_width        <#= model.FloorPlanSettings.CoreWidth #> \
    -core_height       <#= model.FloorPlanSettings.CoreHeight #> \
    -core_utilization  <#= model.FloorPlanSettings.CoreUtilization #> \
    -start_first_row
<#
        break;
    default:
        break;
}
#>

<# foreach(var macroPlace in model.MacroPlaceSettings) { 
var x1 = macroPlace.X;
var y1 = macroPlace.Y;
var x2 = macroPlace.X + (double)macroPlace.Width;
var y2 = macroPlace.Y + (double)macroPlace.Height;
var x2_ = macroPlace.X + (double)macroPlace.Height;
var y2_ = macroPlace.Y + (double)macroPlace.Width;
#>
set_undoable_attribute [get_cells "<#= macroPlace.Name.ToUpper() #>"] orientation {<#= macroPlace.Orientation.ToString()#>}
move_objects -x <#= x1 #> -y <#= y1 #> [get_cells "<#= macroPlace.Name.ToUpper() #>"]
<# 
double p_x1 = 0;
double p_y1 = 0;
double p_x2 = 0;
double p_y2 = 0;
if(macroPlace.Orientation == Orientation.E || macroPlace.Orientation == Orientation.W) { 
    p_x1 = x1 - macroPlace.MarginLeft;
    p_y1 = y1 - macroPlace.MarginBottom;
    p_x2 = x2_ + macroPlace.MarginRight;
    p_y2 = y2_ + macroPlace.MarginTop;
} else { 
    p_x1 = x1 - macroPlace.MarginLeft;
    p_y1 = y1 - macroPlace.MarginBottom;
    p_x2 = x2 + macroPlace.MarginRight;
    p_y2 = y2 + macroPlace.MarginTop;
} #>
create_placement_blockage -bbox {<#= p_x1 #> <#= p_y1 #> <#= p_x2 #> <#= p_y2 #>} -type hard
<# if(macroPlace.ReverseRoutingDirection) { #>
create_route_guide -name route_guide_<#= macroPlace.Name.ToUpper().Replace("/", "_") #> -coordinate {{<#= p_x1 #> <#= p_y1 #>} {<#= p_x2 #> <#= p_y2 #>}} -switch_preferred_direction_layers "<#= string.Join(" ", Enumerable.Range(3,model.MaxRoutingLayer-2).Select(s => "M"+s)) #>"
<# } #>
<# } #>
<# if(model.MacroPlaceSettings.Count > 0) { #>
set_dont_touch_placement [all_macro_cells]
<# } #>

<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>

<# if(model.CapCells != null && model.CapCells.Length != 0) { #>
<# var cap_lib_cells = model.CapCells.Select(c => "$lib_name/" + c).ToList(); #>
# 使用最小号CapCell
add_end_cap -respect_blockage -lib_cell "<#= cap_lib_cells[0] #>"
<# } #>

if {[check_error -verbose] != 0} { exit 2 }
save_mw_cel -design $top_name -as "$top_name\_die_init"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================optimization_settings============
set_delay_calculation_options -arnoldi_effort high
set_host_options -max_core <#= model.Cores #>
# 关闭Router独立进程
set_app_var physopt_enable_router_process false 
set_app_var timing_enable_multiple_clocks_per_reg false
set_fix_multiple_port_nets -all -buffer_constants
set_auto_disable_drc_nets -constant false
# Optinal: add dont use cells

#====================placement_settings============
set MIN_ROUTING_LAYER "[get_layer_attribute -layer metal2 name]"
set MAX_ROUTING_LAYER "[get_layer_attribute -layer metal<#= model.MaxRoutingLayer #> name]"
set_ignored_layers -max_routing_layer $MAX_ROUTING_LAYER
set_ignored_layers -min_routing_layer $MIN_ROUTING_LAYER

set_pnet_options -complete {M1 M2} -see_object {all_types}
set_pnet_options -partial {M3 M4}
report_pnet_options
set physopt_new_fix_constants true
set_buffer_opt_strategy -effort high

<# if(model.StdCell.cdk_name.StartsWith("scc")) { #>
set TIE_CELLS "<#= $"$lib_name/{model.TieHighCell} $lib_name/{model.TieLowCell}" #>"
set_attribute $TIE_CELLS max_fanout 1
set_attribute $TIE_CELLS max_capacitance 0.2 -type float
remove_attribute $TIE_CELLS dont_use
remove_attribute $TIE_CELLS dont_touch
<# } #>

set_fp_placement_strategy -sliver_size 10 -virtual_IPO on \
    -macros_on_edge on \
    -fix_macros all

set_app_var physopt_hard_keepout_distance 10
set placer_soft_keepout_channel_width 10

set_app_var derive_pg_preserve_floating_tieoff false

#====================cts_settings============

define_routing_rule iccrm_clock_double_spacing -default_reference_rule -multiplier_spacing 2 -multiplier_width 2
report_routing_rule iccrm_clock_double_spacing
set_clock_tree_options -routing_rule iccrm_clock_double_spacing -use_default_routing_for_sinks 1

#Optional: clock shielding NDR

set_clock_tree_options -layer_list "<#= string.Join(" ", Enumerable.Range(3, model.MaxRoutingLayer - 2).Select(i => "M"+i)) #>" ;# typically route clocks on metal3 and above

#====================post_cts_settings============
<# if(model.DelayCells != null && model.DelayCells.Length != 0) {
    var delay_cells_str = string.Join(" ", model.DelayCells.Select(c => "$lib_name/" + c));
#>
set ICC_FIX_HOLD_PREFER_CELLS "<#= delay_cells_str #>"
remove_attribute [get_lib_cells $ICC_FIX_HOLD_PREFER_CELLS] dont_touch
set_prefer -min [get_lib_cells $ICC_FIX_HOLD_PREFER_CELLS]
set_fix_hold_options -preferred_buffer
<# } #>

#====================route_si_settings============

set_si_options -delta_delay true \
    -route_xtalk_prevention true \
    -route_xtalk_prevention_threshold 0.25 \
    -analysis_effort medium

set_si_options -min_delta_delay true

set_route_opt_strategy -search_repair_loops 40
set_route_opt_strategy -eco_route_search_repair_loops 10

set_app_var routeopt_skip_report_qor true

set_route_zrt_detail_options -antenna true

<# if(model.Library.StartsWith("HL")) { #>
# set_preferred_routing_direction -layer metal1 -direction horizontal
# set_preferred_routing_direction -layer metal2 -direction vertical
# set_preferred_routing_direction -layer metal3 -direction horizontal
# set_preferred_routing_direction -layer metal4 -direction vertical
# set_preferred_routing_direction -layer metal5 -direction horizontal
# set_preferred_routing_direction -layer metal6 -direction vertical
# set_preferred_routing_direction -layer metal7 -direction horizontal

set_route_zrt_common_options -connect_within_pins {{M1 via_wire_standard_cell_pins}}
<# } #>

#====================2. place_opt=====================

set_app_var compile_instance_name_prefix place_opt
check_mv_design -verbose

create_fp_placement -timing_driven -no_hierarchy_gravity
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
#derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie
<# var mainPowerRingNets = model.FloorPlanSettings.PowerRingNets.Count > 0 ? model.FloorPlanSettings.PowerRingNets : new List<string>(){model.FloorPlanSettings.PowerSettings.PrimaryPower, model.FloorPlanSettings.PowerSettings.PrimaryGround}; 
var mainPowerRingNetsString = string.Join(" ", mainPowerRingNets);
#>
create_rectilinear_rings -nets {<#= mainPowerRingNetsString #>} -offset { <#= model.FloorPlanSettings.HorizontalOffset #> <#= model.FloorPlanSettings.VerticalOffset #> } -width { <#= model.FloorPlanSettings.HorizontalWidth #> <#= model.FloorPlanSettings.VerticalWidth #> } -space { <#= model.FloorPlanSettings.VerticalSpace #> <#= model.FloorPlanSettings.HorizontalSpace #> }

<# if(model.MacroPlaceSettings.Count != 0) { #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.CreateRing) { 
var hwidth = (macroPlace.MarginLeft - 2) / 2; //环外侧与边界距离为1um
var vwidth = (macroPlace.MarginTop - 2) / 2;
#>
create_rectilinear_rings -around macro -macro_cells {<#= macroPlace.Name.ToUpper() #>} -nets { <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> } -width { <#= hwidth #> <#= vwidth #> } -space { 0.5 0.5 } -offset { 0.5 0.5 }
<# } } } #>

<# if(model.FloorPlanSettings.FloorPlanType == FloorPlanType.WidthHeight || model.FloorPlanSettings.FloorPlanType == FloorPlanType.WidthHeightAuto) { 
var width = model.FloorPlanSettings.CoreWidth;
var height = model.FloorPlanSettings.CoreHeight;
var layer = 5;
var hlayer = 6;
if(model.MaxPreRouteLayer % 2 == 0) { //最高层为偶数
    layer = model.MaxPreRouteLayer - 1; //奇数
    hlayer  = model.MaxPreRouteLayer;
    if(model.M1RoutingDirection == "horizontal") {
        layer = model.MaxPreRouteLayer; //偶数
        hlayer  = model.MaxPreRouteLayer - 1;
    }
} else { //最高层为奇数
    layer = model.MaxPreRouteLayer; //奇数
    hlayer  = model.MaxPreRouteLayer - 1;
    if(model.M1RoutingDirection == "horizontal") {
        layer = model.MaxPreRouteLayer - 1; //偶数
        hlayer  = model.MaxPreRouteLayer;
    }
}
#>
<# if(model.FloorPlanSettings.PowerStraps.Count > 0) { #>
<# foreach(var strap in model.FloorPlanSettings.PowerStraps) { 
var pitchParam = strap.Space == null ? "" : "-pitch_within_group " + (strap.Space + strap.Width); 
var powerStrapNets = strap.Nets.Count > 0 ? strap.Nets : new List<string>(){model.FloorPlanSettings.PowerSettings.PrimaryPower, model.FloorPlanSettings.PowerSettings.PrimaryGround};
var powerStrapNetsString = string.Join(" ", powerStrapNets);
#>
<# if(!strap.Orientation) { #>
create_power_straps -direction vertical -start_at <#= strap.Start #> -nets {<#= powerStrapNetsString #>} -layer <#= string.IsNullOrEmpty(strap.Layer) ? "M"+layer : strap.Layer #> -width <#= strap.Width #> -configure step_and_stop -step <#= strap.Step #> -stop <#= strap.Stop == null ? width : (double)strap.Stop #> <#= pitchParam #>
<# } else { #>
create_power_straps -direction horizontal -start_at <#= strap.Start #> -nets {<#= powerStrapNetsString #>} -layer <#= string.IsNullOrEmpty(strap.Layer) ? "M"+hlayer : strap.Layer #> -width <#= strap.Width #> -configure step_and_stop -step <#= strap.Step #> -stop <#= strap.Stop == null ? height : (double)strap.Stop #> <#= pitchParam #>
<# } #>
<# } #>
<# } #>
<# } #>

add_tap_cell_array -master_cell_name <#= model.TapCell #> -distance 20 -pattern normal -connect_power_name <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -connect_ground_name <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
#derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

save_mw_cel -design $top_name -as "$top_name\_power_ring"

set_preroute_drc_strategy -max_layer M<#= model.MaxPreRouteLayer #>
preroute_instances -primary_routing_layer preferred -preferred_routing_layer low

<# if(model.PowerRailLayer == 2) { #>
# 避免电源网格通孔经过M1
<# if(model.Library.StartsWith("HL")) { #>
preroute_standard_cells -fill_empty_rows -do_not_route_over_macros -route_pins_on_layer M2 -skip_macro_pins
<# } else { #>
preroute_standard_cells -fill_empty_rows -do_not_route_over_macros -route_pins_on_layer M2 -remove_floating_pieces -skip_macro_pins -cut_out_empty_spans
<# } #>
<# } else { #>
<# if(model.Library.StartsWith("HL")) { #>
preroute_standard_cells -fill_empty_rows -do_not_route_over_macros -skip_macro_pins
<# } else { #>
preroute_standard_cells -fill_empty_rows -do_not_route_over_macros -remove_floating_pieces -skip_macro_pins -cut_out_empty_spans
<# } #>
<# } #>

if {[check_error -verbose] != 0} { exit 3 }
save_mw_cel -design $top_name -as "$top_name\_floorplan"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events
# FloorPlan完成
<# if(!model.FloorPlanOnly) { #>
set r [place_opt -area_recovery -effort medium -congestion -power -continue_on_missing_scandef]
if { $r == 0 } {
    exit 3
}

<# if(model.Library.StartsWith("SMIC40LL")) { #>
# connect_tie_cells -max_wirelength 50 -tie_high_lib_cell <#= model.TieHighCell #> -tie_low_lib_cell <#= model.TieLowCell #> -max_fanout 5 -obj_type cell_inst -objects [get_cells -hier *]
<# } #>

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

if {[check_error -verbose] != 0} { exit 3 }
save_mw_cel -design $top_name -as "$top_name\_place_opt"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================3. clock_opt_cts=====================

set_app_var cts_instance_name_prefix CTS
check_mv_design -verbose
psynopt
clock_opt -only_cts -no_clock_route -continue_on_missing_scandef -update_clock_latency

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

remove_ideal_network [all_fanout -flat -clock_tree]
set_fix_hold [all_clocks]

if {[check_error -verbose] != 0} { exit 4 }
save_mw_cel -design $top_name -as "$top_name\_clock_opt_cts"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================4. clock_opt_psyn=====================

set_app_var compile_instance_name_prefix clock_opt_psyn

clock_opt -no_clock_route -only_psyn -area_recovery -congestion -continue_on_missing_scandef 

set_app_var compile_instance_name_prefix clock_route

route_zrt_group -all_clock_nets -reuse_existing_global_route true -stop_after_global_route true

# Antenna prevention
<# if(model.AntennaCells != null && model.AntennaCells.Length != 0) {
    var diode_cells_str = string.Join(" ", model.AntennaCells.Select(c => "$lib_name/" + c));
#>
set ICC_PORT_PROTECTION_DIODE "<#= diode_cells_str #>"
remove_attribute $ICC_PORT_PROTECTION_DIODE dont_use
set ports [get_ports * -filter "direction==in"]
# insert_port_protection_diodes -prefix port_protection_diode -diode_cell [get_lib_cells $ICC_PORT_PROTECTION_DIODE] -port $ports -ignore_dont_touch
<# } #>
legalize_placement

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

if {[check_error -verbose] != 0} { exit 5 }
save_mw_cel -design $top_name -as "$top_name\_clock_opt_psyn"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================5. clock_opt_route=====================

source -echo <#= model.Antenna #>

set_si_options -delta_delay false -min_delta_delay false -route_xtalk_prevention false

route_zrt_group -all_clock_nets -reuse_existing_global_route true
optimize_clock_tree -routed_clock_stage detail 

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

if {[check_error -verbose] != 0} { exit 6 }
save_mw_cel -design $top_name -as "$top_name\_clock_opt_route"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================6. route=====================

set_si_options -delta_delay true \
    -route_xtalk_prevention true \
    -route_xtalk_prevention_threshold 0.25 \
    -analysis_effort medium

set_si_options -min_delta_delay true

## pre route_opt checks
set num_ideal [sizeof_collection [all_ideal_nets]]
if {$num_ideal >= 1} {echo "RM-Error: $num_ideal Nets are ideal prior to route_opt. Please investigate it."}

set_route_zrt_common_options -post_detail_route_redundant_via_insertion medium
set_route_zrt_detail_options -optimize_wire_via_effort_level high

report_preferred_routing_direction
check_routeability

route_opt -initial_route_only
if {[check_error -verbose] != 0} { exit 7 }

update_clock_latency
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

save_mw_cel -design $top_name -as "$top_name\_route"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================7. route_opt=====================

set_app_var compile_instance_name_prefix route_opt
update_timing

set_app_var routeopt_allow_min_buffer_with_size_only true

route_opt -skip_initial_route -effort medium -xtalk_reduction
route_opt -incremental 
route_opt -incremental -size_only

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

if {[check_error -verbose] != 0} { exit 8 }
save_mw_cel -design $top_name -as "$top_name\_route_opt"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================7. chip_finish=====================
set_app_var compile_instance_name_prefix route_finish

set_route_zrt_detail_options -eco_route_use_soft_spacing_for_timing_optimization false

#spread_zrt_wires -timing_preserve_hold_slack_threshold 0 -timing_preserve_setup_slack_threshold 0.1
#widen_zrt_wires -timing_preserve_hold_slack_threshold 0 -timing_preserve_setup_slack_threshold 0.1

set_route_zrt_detail_options -antenna true -diode_libcell_names "<#= string.Join(" ", model.AntennaCells)#>" -insert_diodes_during_routing true
route_zrt_detail -incremental true

insert_stdcell_filler -cell_without_metal "<#= string.Join(" ", model.Filler)#>"

derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= stdCellPowerPin #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= stdCellGroundPin #>
<# foreach(var macroPlace in model.MacroPlaceSettings) { #>
<# if(macroPlace.PowerConnections != null) { #>
<# foreach(var pairs in macroPlace.PowerConnections) { #>
derive_pg_connection -power_net <#= pairs.Value #> -power_pin <#= pairs.Key #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } else { #>
<# foreach(var pPin in macroPlace.PowerPins) { #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -power_pin <#= pPin #> -cells {<#= macroPlace.Name.ToUpper() #>}
<# } #>
<# } #>
<# } #>
<# foreach(var gPin in model.MacroPlaceSettings.SelectMany(x => x.GroundPins).Distinct()) { #>
derive_pg_connection -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -ground_pin <#= gPin #>
<# } #>
derive_pg_connection -power_net <#= model.FloorPlanSettings.PowerSettings.PrimaryPower #> -ground_net <#= model.FloorPlanSettings.PowerSettings.PrimaryGround #> -tie

## Final Route clean-up - if needed:
## During minor cleanup, best to turn off ZRoute timing
## options to avoid extraction/timing hits
set_route_zrt_global_options -timing_driven false -crosstalk_driven false
set_route_zrt_track_options -timing_driven false -crosstalk_driven false
set_route_zrt_detail_options -timing_driven false

route_zrt_eco

if {[check_error -verbose] != 0} { exit 9 }
save_mw_cel -design $top_name -as "$top_name\_chip_finish"

gui_zoom -window [gui_get_current_window -types Layout -mru] -full
gui_execute_events

#====================GDS标签=====================

#set routing_direction [report_preferred_routing_direction]

set ports [get_ports *]
foreach_in_collection p $ports {
    set xy_location [get_location $p]
    set x_location  [lindex $xy_location 0]
    set y_location  [lindex $xy_location 1]
    set name [collection_to_list $p]
    set name_1 [string range $name 7 end-2]
    set layer [string range [get_attribute $p layer] 1 end]
    set mntxt_layer [dict get $MnTXTs $layer]

    create_text -height 0.01 -layer $mntxt_layer -origin [list [expr $x_location] [expr $y_location]] -orient W $name_1
}

save_mw_cel -design $top_name -as "$top_name\_gds_label"

#====================输出=====================

verify_pg_nets
verify_lvs > $rpt_path/$top_name\_lvs.rpt

report_placement_utilization > $rpt_path/$top_name\_placement\_utilization.rpt

define_name_rules "IS_rule" -max_length "255" -allowed "A-Z0-9_$"  -replacement_char "_" -type cell
define_name_rules "IS_rule" -max_length "255" -allowed "A-Z0-9_$"  -replacement_char "_" -type net
define_name_rules "IS_rule" -max_length "255" -allowed "A-Z0-9_$[]"  -replacement_char "_" -type port
change_names -rules "IS_rule" -hierarchy

save_mw_cel -as $top_name

report_timing -delay_type max -max_path 20 > $rpt_path/$top_name\_timing\_dfm_max.rpt
report_timing -delay_type min -max_path 20 > $rpt_path/$top_name\_timing\_dfm_min.rpt

<# if(string.IsNullOrEmpty(model.GDSLayerMap)) { #>
set_write_stream_options -output_pin  { geometry }
<# } else { #>
set_write_stream_options -output_pin  { geometry } -map_layer <#= model.GDSLayerMap #>
<# } #>
#set_write_stream_options -output_pin text
#set_write_stream_options -output_pin geometry

write_verilog -no_core_filler_cells -no_tap_cells             $net_path/$top_name\.v
write_verilog -no_tap_cells                                   $net_path/$top_name\_filler.v
write_verilog -no_core_filler_cells                           $net_path/$top_name\_tap.v
write_verilog                                                 $net_path/$top_name\_all.v
<# if(model.Library.StartsWith("SMIC")) { #>
write_verilog -no_tap_cells                                   $net_path/$top_name\_cds.v
<# } else if(model.Library.StartsWith("TSMC")) { #>
write_verilog -no_tap_cells                                   $net_path/$top_name\_cds.v
<# } else if(model.Library.StartsWith("HL")) { #>
write_verilog                                                 $net_path/$top_name\_cds.v
<# } else { #>
write_verilog -no_tap_cells                                   $net_path/$top_name\_cds.v
<# } #>
write_stream -format gds -lib_name $top_name -cells $top_name $gds_path/$top_name\.gds
write_sdf -version 2.1                                        $net_path/$top_name\.sdf
write_parasitics -output                                      $net_path/$top_name\.spef
write_def -pins -output                                       $net_path/$top_name\.def

write_floorplan -all                                          $net_path/$top_name\_floorplan.tcl

gui_write_window_image -window [gui_get_current_window -types Layout -mru] -file $rpt_path/$top_name\.png

save_mw_cel -design $top_name
quit
<# } #>